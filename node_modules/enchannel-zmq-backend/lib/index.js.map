{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;QAyBgB;QAgBA;QAgBA;QAgBA;QAiBA;;;;;;;;;;;;;;;;;;;AAjET,SAAS,oBAAT,CAA8B,OAA9B,EAAuC,QAAvC,EAAiD,MAAjD,EAAyD;AAC9D,SAAO,+BAAc,8BAAa,OAAb,EAAsB,QAAtB,EAAgC,MAAhC,CAAd,CAAP,CAD8D;CAAzD;;;;;;;;;;;;;;AAgBA,SAAS,kBAAT,CAA4B,QAA5B,EAAsC,MAAtC,EAA8C;AACnD,SAAO,uCAA4B,QAA5B,EAAsC,MAAtC,CAAP,CADmD;CAA9C;;;;;;;;;;;;;;AAgBA,SAAS,oBAAT,CAA8B,QAA9B,EAAwC,MAAxC,EAAgD;AACrD,SAAO,yCAA8B,QAA9B,EAAwC,MAAxC,CAAP,CADqD;CAAhD;;;;;;;;;;;;;;AAgBA,SAAS,kBAAT,CAA4B,QAA5B,EAAsC,MAAtC,EAA8C;AACnD,SAAO,uCAA4B,QAA5B,EAAsC,MAAtC,CAAP,CADmD;CAA9C;;;;;;;;;;;;;;;AAiBA,SAAS,kBAAT,CAA4B,QAA5B,EAAsC,MAAtC,EAAiE;MAAnB,qEAAe,kBAAI;;AACtE,MAAM,cAAc,gDAAoB,QAApB,EAA8B,MAA9B,CAAd;;AADgE,aAGtE,CAAY,SAAZ,CAAsB,YAAtB,EAHsE;AAItE,SAAO,+BAAc,WAAd,CAAP,CAJsE;CAAjE","file":"index.js","sourcesContent":["import {\n  SHELL,\n  STDIN,\n  IOPUB,\n  CONTROL,\n} from './constants';\n\nimport {\n  createSubject,\n  createSocket,\n} from './subjection';\n\n/**\n * createChannelSubject creates a subject for sending and receiving messages on\n * the given channel\n * @param  {string} channel                 iopub || shell || control || stdin\n * @param  {string} identity                UUID\n * @param  {Object} config                  Jupyter connection information\n * @param  {string} config.ip               IP address of the kernel\n * @param  {string} config.transport        Transport, e.g. TCP\n * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256\n * @param  {number} config.shell_port       Port for shell channel\n * @return {Rx.Subject} subject for sending and receiving messages on the shell\n *                      channel\n */\nexport function createChannelSubject(channel, identity, config) {\n  return createSubject(createSocket(channel, identity, config));\n}\n\n/**\n * createShellSubject creates a subject for sending and receiving messages on a\n * kernel's shell channel\n * @param  {string} identity                UUID\n * @param  {Object} config                  Jupyter connection information\n * @param  {string} config.ip               IP address of the kernel\n * @param  {string} config.transport        Transport, e.g. TCP\n * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256\n * @param  {number} config.shell_port       Port for shell channel\n * @return {Rx.Subject} subject for sending and receiving messages on the shell\n *                      channel\n */\nexport function createShellSubject(identity, config) {\n  return createChannelSubject(SHELL, identity, config);\n}\n\n/**\n * createControlSubject creates a subject for sending and receiving on a\n * kernel's control channel\n * @param  {string} identity                UUID\n * @param  {Object} config                  Jupyter connection information\n * @param  {string} config.ip               IP address of the kernel\n * @param  {string} config.transport        Transport, e.g. TCP\n * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256\n * @param  {number} config.control_port     Port for control channel\n * @return {Rx.Subject} subject for sending and receiving messages on the control\n *                      channel\n */\nexport function createControlSubject(identity, config) {\n  return createChannelSubject(CONTROL, identity, config);\n}\n\n/**\n * createStdinSubject creates a subject for sending and receiving messages on a\n * kernel's stdin channel\n * @param  {string} identity                UUID\n * @param  {Object} config                  Jupyter connection information\n * @param  {string} config.ip               IP address of the kernel\n * @param  {string} config.transport        Transport, e.g. TCP\n * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256\n * @param  {number} config.stdin_port       Port for stdin channel\n * @return {Rx.Subject} subject for sending and receiving messages on the stdin\n *                      channel\n */\nexport function createStdinSubject(identity, config) {\n  return createChannelSubject(STDIN, identity, config);\n}\n\n/**\n * createIOPubSubject creates a shell subject for receiving messages on a\n * kernel's iopub channel\n * @param  {string} identity                UUID\n * @param  {Object} config                  Jupyter connection information\n * @param  {string} config.ip               IP address of the kernel\n * @param  {string} config.transport        Transport, e.g. TCP\n * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256\n * @param  {number} config.iopub_port       Port for iopub channel\n * @param  {string} subscription            subscribed topic; defaults to all\n * @return {Rx.Subject} subject for receiving messages on the shell_port\n *                      channel\n */\nexport function createIOPubSubject(identity, config, subscription = '') {\n  const ioPubSocket = createSocket(IOPUB, identity, config);\n  // ZMQ PUB/SUB subscription (not an Rx subscription)\n  ioPubSocket.subscribe(subscription);\n  return createSubject(ioPubSocket);\n}\n"]}