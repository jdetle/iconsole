'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelSubject = createChannelSubject;
exports.createShellSubject = createShellSubject;
exports.createControlSubject = createControlSubject;
exports.createStdinSubject = createStdinSubject;
exports.createIOPubSubject = createIOPubSubject;

var _constants = require('./constants');

var _subjection = require('./subjection');

/**
 * createChannelSubject creates a subject for sending and receiving messages on
 * the given channel
 * @param  {string} channel                 iopub || shell || control || stdin
 * @param  {string} identity                UUID
 * @param  {Object} config                  Jupyter connection information
 * @param  {string} config.ip               IP address of the kernel
 * @param  {string} config.transport        Transport, e.g. TCP
 * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256
 * @param  {number} config.shell_port       Port for shell channel
 * @return {Rx.Subject} subject for sending and receiving messages on the shell
 *                      channel
 */
function createChannelSubject(channel, identity, config) {
  return (0, _subjection.createSubject)((0, _subjection.createSocket)(channel, identity, config));
}

/**
 * createShellSubject creates a subject for sending and receiving messages on a
 * kernel's shell channel
 * @param  {string} identity                UUID
 * @param  {Object} config                  Jupyter connection information
 * @param  {string} config.ip               IP address of the kernel
 * @param  {string} config.transport        Transport, e.g. TCP
 * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256
 * @param  {number} config.shell_port       Port for shell channel
 * @return {Rx.Subject} subject for sending and receiving messages on the shell
 *                      channel
 */
function createShellSubject(identity, config) {
  return createChannelSubject(_constants.SHELL, identity, config);
}

/**
 * createControlSubject creates a subject for sending and receiving on a
 * kernel's control channel
 * @param  {string} identity                UUID
 * @param  {Object} config                  Jupyter connection information
 * @param  {string} config.ip               IP address of the kernel
 * @param  {string} config.transport        Transport, e.g. TCP
 * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256
 * @param  {number} config.control_port     Port for control channel
 * @return {Rx.Subject} subject for sending and receiving messages on the control
 *                      channel
 */
function createControlSubject(identity, config) {
  return createChannelSubject(_constants.CONTROL, identity, config);
}

/**
 * createStdinSubject creates a subject for sending and receiving messages on a
 * kernel's stdin channel
 * @param  {string} identity                UUID
 * @param  {Object} config                  Jupyter connection information
 * @param  {string} config.ip               IP address of the kernel
 * @param  {string} config.transport        Transport, e.g. TCP
 * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256
 * @param  {number} config.stdin_port       Port for stdin channel
 * @return {Rx.Subject} subject for sending and receiving messages on the stdin
 *                      channel
 */
function createStdinSubject(identity, config) {
  return createChannelSubject(_constants.STDIN, identity, config);
}

/**
 * createIOPubSubject creates a shell subject for receiving messages on a
 * kernel's iopub channel
 * @param  {string} identity                UUID
 * @param  {Object} config                  Jupyter connection information
 * @param  {string} config.ip               IP address of the kernel
 * @param  {string} config.transport        Transport, e.g. TCP
 * @param  {string} config.signature_scheme Hashing scheme, e.g. hmac-sha256
 * @param  {number} config.iopub_port       Port for iopub channel
 * @param  {string} subscription            subscribed topic; defaults to all
 * @return {Rx.Subject} subject for receiving messages on the shell_port
 *                      channel
 */
function createIOPubSubject(identity, config) {
  var subscription = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

  var ioPubSocket = (0, _subjection.createSocket)(_constants.IOPUB, identity, config);
  // ZMQ PUB/SUB subscription (not an Rx subscription)
  ioPubSocket.subscribe(subscription);
  return (0, _subjection.createSubject)(ioPubSocket);
}
//# sourceMappingURL=index.js.map